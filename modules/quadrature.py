# -*- coding: utf-8 -*-
"""
Created on Thu, Nov 29 2018

@author: Sebastian
"""

import numpy as np
import basis_func

def quad_on_triangle(t, f, n = 5):
    """
    Performs Gaussion quadrature of order n on a triangle.

    Input
    ``t``: (3,2) array, storing the nodes of the triangle
    ``f``: the function to integrate
    ``n``: optional, the degree of the method

    Output:

    ``q`` : The value of the integral of f over T

    """

    ### c.f. http://people.sc.fsu.edu/~jburkardt/cpp_src/triangle_dunavant_rule/triangle_dunavant_rule.cpp
    ### Transform the Gauss points from the reference triangle to the physical triangle

    r = ref[str(n)]
    w = weights[str(n)]
    k = len(w)

    p_0 = np.reshape(t[0,:], (1,2))
    p_1 = np.reshape(t[1,:], (1,2))
    p_2 = np.reshape(t[2,:], (1,2))

    offset_v = np.dot(np.reshape(r[:,0],(k,1)),(p_1 - p_0))
    offset_w = np.dot(np.reshape(r[:,1],(k,1)),(p_2 - p_0))
    p_0_stacked = np.dot(np.ones((k,1)),p_0)
    physical = p_0_stacked + offset_v + offset_w

    x = np.reshape(physical[:,0], (len(physical), 1))
    y = np.reshape(physical[:,1], (len(physical), 1))

    return (np.abs(area(t))*np.dot(w,np.reshape(f(x, y),(k,1))))

def area(t):
    """
    Computes the area of a triangle

    Input
    ``t``: (3,2) array, storing the nodes of the triangle

    Output:

    ``area`` : The area of the triangle

    """

    A = np.hstack([t, np.ones((3,1))])
    area = 0.5 * np.linalg.det(A)
    return area

def l2_error_on_triangle(t, u, f, n=5):
    """
    Computes the L2 error between the numerical solution and the analytical
    solution on one triangle.
    The numerical solution is assumed to be linear on the triangle.

    Input
    ``t``: (3,2) array, storing the nodes of the triangle
    ``u``: (3,1) array, storing the values of u in the nodes
    ``f``: the function to compare to
    ``n``: optional, the degree of the quadrature used

    Output:

    ``e`` : The error ||u-f||_2 in the L2 norm

    """
    g = lambda x, y : (np.dot(basis_func.tri_p1(t[:,0], t[:,1], np.hstack([x,y]))[2],u) - f(x,y))**2
    q = quad_on_triangle(t, g, n)
    return np.sqrt(q)

def l2error_on_mesh(u, f, x, y, topo, n=5):
    """
    Computes the L2 error between the numerical solution and the analytical
    solution on the whole mesh.
    The numerical solution is assumed to be piecewise linear.

    Input
    ``u``: (n,1) array, storing the values of u in the nodes
    ``f``: the function to compare to
    ``x``: (n,1) array, storing the x values of the nodes
    ``y``: (n,1) array, storing the y values of the nodes
    ``topo``: (m,3) array, storing the connectivity of the mesh
    ``n``: optional, the degree of the quadrature used

    Output:

    ``e`` : The error ||u-f||_2 in the L2 norm

    """
    e = 0
    for el in topo:
        t_l = np.hstack([np.reshape(x[el], (3,1)), np.reshape(y[el], (3,1))])
        u_l = u[el]
        e += l2_error_on_triangle(t_l, u_l, f, n)**2
    return np.sqrt(e)

ref = {
    '1': np.array([[0.333333333333333, 0.333333333333333]]),
    '2': np.array([[0.666666666666667, 0.166666666666667],
        [0.166666666666667, 0.166666666666667],
    	[0.166666666666667, 0.666666666666667]]),
    '3': np.array([[0.333333333333333, 0.333333333333333],
        [0.6, 0.2],
    	[0.2, 0.2],
    	[0.2, 0.6]]),
    '4': np.array([[0.10810301816807, 0.445948490915965],
    	[0.445948490915965, 0.445948490915965],
    	[0.445948490915965, 0.10810301816807],
    	[0.816847572980459, 0.09157621350977101],
    	[0.09157621350977101, 0.09157621350977101],
    	[0.09157621350977101, 0.816847572980459]]),
    '5': np.array([[0.333333333333333, 0.333333333333333],
    	[0.05971587178977, 0.470142064105115],
    	[0.470142064105115, 0.470142064105115],
    	[0.470142064105115, 0.05971587178977],
    	[0.797426985353087, 0.101286507323456],
    	[0.101286507323456, 0.101286507323456],
    	[0.101286507323456, 0.797426985353087]]),
    '6': np.array([[0.501426509658179, 0.24928674517091],
    	[0.24928674517091, 0.24928674517091],
    	[0.24928674517091, 0.501426509658179],
    	[0.873821971016996, 0.063089014491502],
    	[0.063089014491502, 0.063089014491502],
    	[0.063089014491502, 0.873821971016996],
    	[0.053145049844817, 0.310352451033784],
    	[0.310352451033784, 0.636502499121399],
    	[0.636502499121399, 0.053145049844817],
    	[0.310352451033784, 0.053145049844817],
    	[0.636502499121399, 0.310352451033784],
    	[0.053145049844817, 0.636502499121399]]),
    '7': np.array([[0.333333333333333, 0.333333333333333],
    	[0.47930806784192, 0.26034596607904],
    	[0.26034596607904, 0.26034596607904],
    	[0.26034596607904, 0.47930806784192],
    	[0.869739794195568, 0.06513010290221601],
    	[0.06513010290221601, 0.06513010290221601],
    	[0.06513010290221601, 0.869739794195568],
    	[0.048690315425316, 0.312865496004874],
    	[0.312865496004874, 0.63844418856981],
    	[0.63844418856981, 0.048690315425316],
    	[0.312865496004874, 0.048690315425316],
    	[0.63844418856981, 0.312865496004874],
    	[0.048690315425316, 0.63844418856981]]),
    '8': np.array([[0.333333333333333, 0.333333333333333],
    	[0.081414823414554, 0.459292588292723],
    	[0.459292588292723, 0.459292588292723],
    	[0.459292588292723, 0.081414823414554],
    	[0.65886138449648, 0.17056930775176],
    	[0.17056930775176, 0.17056930775176],
    	[0.17056930775176, 0.65886138449648],
    	[0.898905543365938, 0.050547228317031],
    	[0.050547228317031, 0.050547228317031],
    	[0.050547228317031, 0.898905543365938],
    	[0.008394777409958001, 0.263112829634638],
    	[0.263112829634638, 0.728492392955404],
    	[0.728492392955404, 0.008394777409958001],
    	[0.263112829634638, 0.008394777409958001],
    	[0.728492392955404, 0.263112829634638],
    	[0.008394777409958001, 0.728492392955404]]),
    '9': np.array([[0.333333333333333, 0.333333333333333],
    	[0.020634961602525, 0.489682519198738],
    	[0.489682519198738, 0.489682519198738],
    	[0.489682519198738, 0.020634961602525],
    	[0.125820817014127, 0.437089591492937],
    	[0.437089591492937, 0.437089591492937],
    	[0.437089591492937, 0.125820817014127],
    	[0.623592928761935, 0.188203535619033],
    	[0.188203535619033, 0.188203535619033],
    	[0.188203535619033, 0.623592928761935],
    	[0.910540973211095, 0.044729513394453],
    	[0.044729513394453, 0.044729513394453],
    	[0.044729513394453, 0.910540973211095],
    	[0.036838412054736, 0.221962989160766],
    	[0.221962989160766, 0.741198598784498],
    	[0.741198598784498, 0.036838412054736],
    	[0.221962989160766, 0.036838412054736],
    	[0.741198598784498, 0.221962989160766],
    	[0.036838412054736, 0.741198598784498]])
}
weights = {
    '1': np.array([1]),
    '2': np.array([0.333333333333333,
    	0.333333333333333,
    	0.333333333333333]),
    '3': np.array([-0.5625,
    	0.520833333333333,
    	0.520833333333333,
    	0.520833333333333]),
    '4': np.array([0.223381589678011,
    	0.223381589678011,
    	0.223381589678011,
    	0.109951743655322,
    	0.109951743655322,
    	0.109951743655322]),
    '5': np.array([0.225,
    	0.132394152788506,
    	0.132394152788506,
    	0.132394152788506,
    	0.125939180544827,
    	0.125939180544827,
    	0.125939180544827]),
    '6': np.array([0.116786275726379,
    	0.116786275726379,
    	0.116786275726379,
    	0.050844906370207,
    	0.050844906370207,
    	0.050844906370207,
    	0.082851075618374,
    	0.082851075618374,
    	0.082851075618374,
    	0.082851075618374,
    	0.082851075618374,
    	0.082851075618374]),
    '7': np.array([-0.149570044467682,
    	0.175615257433208,
    	0.175615257433208,
    	0.175615257433208,
    	0.053347235608838,
    	0.053347235608838,
    	0.053347235608838,
    	0.077113760890257,
    	0.077113760890257,
    	0.077113760890257,
    	0.077113760890257,
    	0.077113760890257,
    	0.077113760890257]),
    '8': np.array([0.144315607677787,
    	0.09509163426728499,
    	0.09509163426728499,
    	0.09509163426728499,
    	0.103217370534718,
    	0.103217370534718,
    	0.103217370534718,
    	0.032458497623198,
    	0.032458497623198,
    	0.032458497623198,
    	0.027230314174435,
    	0.027230314174435,
    	0.027230314174435,
    	0.027230314174435,
    	0.027230314174435,
    	0.027230314174435]),
    '9': np.array([0.097135796282799,
    	0.031334700227139,
    	0.031334700227139,
    	0.031334700227139,
    	0.077827541004774,
    	0.077827541004774,
    	0.077827541004774,
    	0.07964773892721,
    	0.07964773892721,
    	0.07964773892721,
    	0.025577675658698,
    	0.025577675658698,
    	0.025577675658698,
    	0.043283539377289,
    	0.043283539377289,
    	0.043283539377289,
    	0.043283539377289,
    	0.043283539377289,
    	0.043283539377289])
}
